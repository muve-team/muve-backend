import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'kr.muve'
    version = '0.0.1-SNAPSHOT'
    java.sourceCompatibility = JavaVersion.VERSION_17

    dependencies { // 모든 하위 모듈에 추가 될 의존성 목록입니다.
        implementation 'org.springframework.boot:spring-boot-starter'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'

        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
}

project(":common") {
    bootJar.enabled = false
    jar.enabled = true

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // query DSL
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // JWT 관련 라이브러리
        implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
        implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
        implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

        implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    }
}

project(":admin") {
    tasks.withType(BootJar).configureEach { bootJarTask ->
        bootJarTask.archiveFileName = "muve-admin.jar"
    }

    tasks.register('zip', Zip) {
        dependsOn bootJar
        archiveFileName = "muve-admin.zip"

        from("build/libs/muve-admin.jar") {
            into ""
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

        runtimeOnly 'com.mysql:mysql-connector-j'
        runtimeOnly 'com.h2database:h2'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        implementation project(":common")
    }
}

project(":mall") {
    tasks.withType(BootJar).configureEach { bootJarTask ->
        bootJarTask.archiveFileName = "muve-mall.jar"
    }

    tasks.register('zip', Zip) {
        dependsOn bootJar
        archiveFileName = "muve-mall.zip"

        from("build/libs/muve-mall.jar") {
            into ""
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

        runtimeOnly 'com.mysql:mysql-connector-j'
        runtimeOnly 'com.h2database:h2'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        implementation project(":common")
    }
}

project(":api") {
    tasks.withType(BootJar).configureEach { bootJarTask ->
        bootJarTask.archiveFileName = "muve-api.jar"
    }

    tasks.register('zip', Zip) {
        dependsOn bootJar
        archiveFileName = "muve-api.zip"

        from("build/libs/muve-api.jar") {
            into ""
        }
    }

    def generated = 'src/main/generated'

    tasks.withType(JavaCompile).configureEach {
        options.generatedSourceOutputDirectory = file(generated)
    }

    sourceSets {
        main.java.srcDirs += "$projectDir/build/generated"
    }

    clean {
        delete file(generated)
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-logging'

        implementation 'com.google.guava:guava:33.3.1-jre'
        implementation 'org.apache.commons:commons-lang3:3.17.0'

        runtimeOnly 'com.mysql:mysql-connector-j'
        runtimeOnly 'com.h2database:h2'

        implementation project(":common")
    }
}